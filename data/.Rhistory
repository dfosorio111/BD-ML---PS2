HW1 <- HoltWinters(dato$Dato)
install.packages("readxl")
library("readxl")
dato <- read.csv("C:/Users/danie/OneDrive/Escritorio/Tablas varias/HOLTWINTERS DESEMPLEO.csv", sep = ";")
View(dato)
dato$Fecha <- as.Date(dato$ï..Fecha, "%Y-%m")
View(dato)
dato <- read.csv("C:/Users/danie/OneDrive/Escritorio/Tablas varias/HOLTWINTERS DESEMPLEO.csv", sep = ";")
df$Date <- as.Date(df$observation_date, "%Y-%m-%d")
dato$Fecha <- as.Date(dato$ï..Fecha, "%Y-%m-%d")
dato$Fecha <- as.Date(dato$ï..Fecha, "%m-%Y")
dato <- read.csv("C:/Users/danie/OneDrive/Escritorio/Tablas varias/HOLTWINTERS DESEMPLEO.csv", sep = ";")
View(dato)
dato$Fecha <- as.Date(dato$ï..Fecha, "%m-%Y")
dato <- read.csv("C:/Users/danie/OneDrive/Escritorio/Tablas varias/HOLTWINTERS DESEMPLEO.csv", sep = ";")
View(dato)
dato$Fecha <- as.Date(dato$ï..Fecha, "%d-%m-%Y")
typeof(dato$ï..Fecha)
dato <- read.csv("C:/Users/danie/OneDrive/Escritorio/Tablas varias/HOLTWINTERS DESEMPLEO.csv", sep = ";")
dfts <- ts(dato$ï..Fecha, frequency=12)
HW1 <- HoltWinters(dfts)
dfts <- ts(dato$ï..Fecha, frequency=1)
HW1 <- HoltWinters(dfts)
dfts
dfts <- ts(dato$Dato, frequency=1)
dfts
dfts <- ts(dato$Dato, frequency=12)
dfts
HW1 <- HoltWinters(dfts)
dfts <- ts(dato$Dato, frequency=1)
dfts
HW1 <- HoltWinters(dfts)
dfts <- ts(dato$Dato, frequency=6)
dfts
dfts <- ts(dato$Dato, frequency=12)
dfts
dfts <- ts(dato$Dato, frequency=24)
dfts
dfts <- ts(dato$Dato, frequency=10)
dfts
dfts <- ts(dato$Dato, frequency=13)
dfts
HW1 <- HoltWinters(dfts)
dfts <- ts(dato$Dato, frequency=1)
dfts
HW1 <- HoltWinters(dfts)
dato <- read.csv("C:/Users/danie/OneDrive/Escritorio/Tablas varias/HOLTWINTERS DESEMPLEO.csv", sep = ";")
View(dato)
dfts <- ts(dato$Dato, frequency=12)
dfts
HW1 <- HoltWinters(dfts)
HW1
dato <- read.csv("C:/Users/danie/OneDrive/Escritorio/Tablas varias/HOLTWINTERS DESEMPLEO.csv", sep = ";")
View(dato)
dfts <- ts(dato$Dato, frequency=12)
dfts
HW1 <- HoltWinters(dfts)
?HoltWinters
HW1 <- HoltWinters(dfts, b.start = 0)
HW1 <- HoltWinters(dfts, b.start = 1)
HW1 <- HoltWinters(dfts, b.start = TRUE)
HW1 <- HoltWinters(dfts)
dfts
dato <- read.csv("C:/Users/danie/OneDrive/Escritorio/Tablas varias/HOLTWINTERS DESEMPLEO.csv", sep = ";")
View(dato)
dfts <- ts(dato$Dato, frequency=12)
HW1 <- HoltWinters(dfts)
HW1 <- HoltWinters(dfts, alpha=0.2, beta=0.1, gamma=0.1)
HW1 <- HoltWinters(dfts, alpha = NULL, beta = NULL, gamma = NULL,
seasonal = c("additive", "multiplicative"),
start.periods = 2, l.start = NULL, b.start = NULL,
s.start = NULL,
optim.start = c(alpha = 0.3, beta = 0.1, gamma = 0.1),
optim.control = list())
colmap(map = municipios, map_id = 'id', autocomplete = FALSE, legend = TRUE)
library(colmaps)
library(ggplot2)
library(sp)
install.packages("colmaps")
install.packages("devtools")
devtools::install_github("nebulae-co/colmaps", force = TRUE)
install.packages("colmaps")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("nebulae-co/colmaps", force = TRUE)
library(colmaps)
library(ggplot2)
library(sp)
colmap(map = municipios, map_id = 'id', autocomplete = FALSE, legend = TRUE)
FOREX <- read_excel("C:/Users/danie/OneDrive/Escritorio/ANIF/FOREX.xls")
library(dplyr)
library(ggplot2)
library(tidyquant)
library(readxl)
FOREX <- read_excel("C:/Users/danie/OneDrive/Escritorio/ANIF/FOREX.xls")
COP <- FOREX$`COP=X Close`
RetornosLog <- rep(0, length(COP)-1)
for (i in 1:(length(RetornosLog))) {
RetornosLog[i]<- log(COP[i+1]/COP[i])
}
media <- mean(RetornosLog)
Sd <- sd(RetornosLog)
realizaciones <- matrix(rep(0,10000*500),500,10000)
for (i in 1:10000) {
for (j in 1:500) {
if (j == 1) {
realizaciones[j,i] <- COP[length(COP)]*exp((media-((Sd^2)/2)+Sd*rnorm(1,0,1)))
}else{
realizaciones[j,i] <- realizaciones[j-1,i]*exp((media-((Sd^2)/2)+Sd*rnorm(1,0,1)))
}
}
}
fecha <- seq(1:length(realizaciones[,1]))
promedio <- matrix()
desviacion <- matrix()
alto <- matrix()
bajo <- matrix()
for(i in 1:120){
promedio[i] <- mean(realizaciones[i,])
desviacion[i] <- sd(realizaciones[i,])
alto[i] <- as.numeric(promedio[i])+1.96*as.numeric(desviacion[i])
bajo[i] <- as.numeric(promedio[i])-1.96*as.numeric(desviacion[i])
}
plot(fecha[1:120], promedio, type = "l", col = "1", main = "Modelo de drift
y choque aleatorio para el precio del USD/COP", xlab = "Dias", ylab = "Precio",
ylim = c(3000,6000))
lines(alto, type ="l", col = "Red")
lines(bajo, type ="l", col = "Red")
for (i in 2:120) {
lines(realizaciones[1:120,runif(1,1,10000)], type = "l", col = "Blue")
}
View(realizaciones)
precio_medio <- mean(promedio[1:16])
rango_bajo <- mean(bajo[1:16])
rango_alto <- mean(alto[1:16])
precio_medio
rango_bajo
rango_alto
#Importar los datos
datos <- read.csv("C:/Users/dfranco/OneDrive - Asociación Nacional de Instituciones Financieras/Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
#Importar los datos
datos <- read.csv("C:/Users/dfranco/OneDrive - Asociación Nacional de Instituciones Financieras/Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco\Mercado Laboral/Histórico TD.csv", sep = ";")
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$ï..Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 8, prediction.interval = T, level = 0.9)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$ï..Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$ï..Fecha, "%d/%m/%Y")
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$ï..Fecha, "%d/%m/%Y")
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
head(datos)
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
HWplot3<-function(ts_object,  n.ahead=4,  CI=.9,  error.ribbon='red', line.size=1){
hw_object<-HoltWinters(ts_object)
forecast<-predict(hw_object,  n.ahead=n.ahead,  prediction.interval=T,  level=CI)
for_values<-data.frame(time=round(time(forecast),  3),  value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw_object$fitted),  3),  value_fitted=as.data.frame(hw_object$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw_object$x),  3),  Actual=c(hw_object$x))
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
graphset.melt<-melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')
p<-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill=error.ribbon) + geom_line(aes(colour=variable), size=line.size) + geom_vline(xintercept=max(actual_values$time),  lty=2) + xlab('Time') + ylab('Value') + labs(legend.position='bottom') + scale_colour_hue('')
return(p)
}
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
datosts
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
HWplot3<-function(ts_object,  n.ahead=4,  CI=.9,  error.ribbon='red', line.size=1){
hw_object<-HoltWinters(ts_object)
forecast<-predict(hw_object,  n.ahead=n.ahead,  prediction.interval=T,  level=CI)
for_values<-data.frame(time=round(time(forecast),  3),  value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw_object$fitted),  3),  value_fitted=as.data.frame(hw_object$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw_object$x),  3),  Actual=c(hw_object$x))
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
graphset.melt<-melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')
p<-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill=error.ribbon) + geom_line(aes(colour=variable), size=line.size) + geom_vline(xintercept=max(actual_values$time),  lty=2) + xlab('Time') + ylab('Value') + labs(legend.position='bottom') + scale_colour_hue('')
return(p)
}
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(reshape)
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
datos <- datos[-length(datos$Fecha),]
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
#Importar los datos
datos <- read.csv("C:/Users/danie/Asociación Nacional de Instituciones Financieras/Anif - Investigadores/Daniel Franco/Mercado Laboral/Histórico TD.csv", sep = ";")
head(datos)
tail(datos)
#Fecha en el formato correcto
datos$fecha <- as.Date(datos$Fecha, "%d/%m/%Y")
#Dejar la base de datos en formato ts (Time-Series objects)
datosts <- ts(datos$TD, frequency = 12, start = c(2001,1))
#Descomponer la serie de tiempo
components_datosts <- decompose(datosts)
plot(components_datosts)
#Realizar el holt-winter de la serie y verlo ploteado
hw <- HoltWinters(datosts)
plot(hw)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 7, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
#Realizar los pronósticos
forecast <- predict(hw, n.ahead = 6, prediction.interval = T, level = 0.95)
plot(hw, forecast)
#promedio esperado del desempleo en el año
pronostico <- as.data.frame(forecast)
mean(pronostico$fit)
mean(pronostico$upr)
mean(pronostico$lwr)
forecast
HWplot3<-function(ts_object,  n.ahead=4,  CI=.9,  error.ribbon='red', line.size=1){
hw_object<-HoltWinters(ts_object)
forecast<-predict(hw_object,  n.ahead=n.ahead,  prediction.interval=T,  level=CI)
for_values<-data.frame(time=round(time(forecast),  3),  value_forecast=as.data.frame(forecast)$fit,  dev=as.data.frame(forecast)$upr-as.data.frame(forecast)$fit)
fitted_values<-data.frame(time=round(time(hw_object$fitted),  3),  value_fitted=as.data.frame(hw_object$fitted)$xhat)
actual_values<-data.frame(time=round(time(hw_object$x),  3),  Actual=c(hw_object$x))
graphset<-merge(actual_values,  fitted_values,  by='time',  all=TRUE)
graphset<-merge(graphset,  for_values,  all=TRUE,  by='time')
graphset[is.na(graphset$dev),  ]$dev<-0
graphset$Fitted<-c(rep(NA,  NROW(graphset)-(NROW(for_values) + NROW(fitted_values))),  fitted_values$value_fitted,  for_values$value_forecast)
graphset.melt<-melt(graphset[, c('time', 'Actual', 'Fitted')], id='time')
p<-ggplot(graphset.melt,  aes(x=time,  y=value)) + geom_ribbon(data=graphset, aes(x=time, y=Fitted, ymin=Fitted-dev,  ymax=Fitted + dev),  alpha=.2,  fill=error.ribbon) + geom_line(aes(colour=variable), size=line.size) + geom_vline(xintercept=max(actual_values$time),  lty=2) + xlab('Time') + ylab('Value') + labs(legend.position='bottom') + scale_colour_hue('')
return(p)
}
graph <- HWplot3 (datosts, n.ahead = 8) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
graph <- HWplot3 (datosts, n.ahead = 6) +
scale_colour_brewer("Valores", palette = "Set1")+
labs(title = "Pronóstico TD 2022") + xlab("Año")+ ylab("Tasa de Desempleo")+
scale_x_continuous(breaks = seq(2001, 2022,2))+ scale_y_continuous(breaks = seq(8, 22,2))+theme(plot.title = element_text(hjust = 0.5))
graph
#Limpiar entorno
rm(list = ls())
#Installar paquetes
if(!require(pacman)) install.packages("pacman");require(pacman)
p_load(rio, # import/export data
tidyverse, # tidy-data
skimr, # summary data
caret) # Classification And REgression Training
## load data
df <- import("https://gitlab.com/Lectures-R/bd-meca-2022-summer/lecture-01/-/raw/main/data/GEIH_sample1.Rds")
db <- as_tibble(df) ## from dataframe to tibble
## print data
head(db)
tail(db)
###Esta es la función crack del día
## summary db
skim(db) %>% head()
skim(db)
###Esta es la función crack del día
## summary db
skim(db) %>% head()
R.version()
R.Version()
#Gráfico (muy útil ver lo de data to viz)
ggplot(data = db , mapping = aes(x = age , y = y_ingLab_m , group=as.factor(formal) , color=as.factor(formal))) +
geom_point()
#Para tener un subset
ggplot(data = db%>%subset(is.na(formal) == FALSE) , mapping = aes(x = age , y = y_ingLab_m , group=as.factor(formal) , color=as.factor(formal))) +
geom_point()
## density: income by sex
p <- ggplot(data=db) +
geom_histogram(mapping = aes(x=y_ingLab_m , group=as.factor(sex) , fill=as.factor(sex)))
p
p + scale_fill_manual(values = c("0"="red" , "1"="blue") , label = c("0"="Hombre" , "1"="Mujer") , name = "Sexo")
box_plot
#Para meter temas predefinidos
box_plot <- ggplot(data=db , mapping = aes(as.factor(estrato1) , totalHoursWorked)) +
geom_boxplot()
box_plot
box_plot
## add another geometry
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") , label = c("0"="Hombre" , "1"="Mujer") , name = "Sexo")
box_plot
## add theme
box_plot + theme_test()
####Transformaciones####
h_hour = ggplot() + geom_histogram(data=db , aes(x=hoursWorkUsual) , fill="#99FF33" , alpha=0.5)
h_hour
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
#Reescalar la variable
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
####Transformaciones####
h_hour = ggplot() + geom_histogram(data=db , aes(x=hoursWorkUsual) , fill="#99FF33" , alpha=0.8)
h_hour
#Reescalar la variable
db = db %>% mutate(esc_hoursWorkUsual = scale(hoursWorkUsual))
h_hour + geom_histogram(data=db , aes(x=esc_hoursWorkUsual) , fill="#FF0066" , alpha=0.5)
#trasnformación boxcox
BoxCoxTrans(db$y_ingLab_m , na.rm=T)
?BoxCoxTrans
db = db %>%
group_by(directorio) %>%
mutate(mean_y_total_m = mean(y_total_m,na.rm=T))
head(db)
db_2 = db %>%
group_by(directorio) %>%
summarise(mean_y_total_m = mean(y_total_m,na.rm=T))
head(db_2)
?mvar
??mvar()
getwd()
#Código de limpieza de datos
#Establecer directorios
#Daniel
setwd("C:/Users/danie/OneDrive/Escritorio/Uniandes/PEG/Big Data and Machine Learning/BD-ML---PS2\data")
#Código de limpieza de datos
#Establecer directorios
#Daniel
setwd("C:/Users/danie/OneDrive/Escritorio/Uniandes/PEG/Big Data and Machine Learning/BD-ML---PS2/data")
#Se establece semilla
set.seed(1000)
#Importar paquetes y cargar librerías
require(pacman)
p_load(tidyverse, rvest, data.table, dplyr, skimr, caret, rio,
vtable, stargazer, ggplot2, boot, MLmetrics, lfe,
tidyverse, fabricatr, stargazer, Hmisc, writexl, viridis)
#Limpiar el ambiente
rm(list=ls())
#Establecer directorios
#Daniel
setwd("C:/Users/danie/OneDrive/Escritorio/Uniandes/PEG/Big Data and Machine Learning/BD-ML---PS2/data")
#Importar archivos
train_hogares <- readRDS("train_hogares.Rds")
View(train_hogares)
train_personas <- readRDS("train_personas.Rds")
test_hogares <- readRDS("test_hogares.Rds")
test_personas <- readRDS("test_personas.Rds")
table(train_hogares$Dominio)
#Que variables se comparten?
names(test_hogares)
names(train_hogares)
#Base para clasificación
train_h <- train_hogares(names(test_hogares))
#Base para clasificación
train_h <- train_hogares[names(test_hogares)]
train_h$pobre <- train_hogares$Pobre
View(train_h)
train_hogares <- readRDS("train_hogares.Rds")
train_personas <- readRDS("train_personas.Rds")
test_hogares <- readRDS("test_hogares.Rds")
test_personas <- readRDS("test_personas.Rds")
View(train_hogares)
#Construir pobrezaMonetaria porque "pobre" hace referencia a pobreza extrema
train_hogares <- train_hogares%>%mutate(prueba_pobreza = ifelse(Ingpcug < Li, 1, 0))
train_hogares%>%select(Pobre, prueba_pobreza)%>%head(100)
train_hogares%>%select(Pobre, prueba_pobreza)
View(train_hogares%>%select(Pobre, prueba_pobreza)%>%head(100))
train_hogares <- train_hogares%>%mutate(prueba_pobreza2 = ifelse(Ingpcug < Lp, 1, 0))
train_hogares <- train_hogares%>%mutate(tets = ifelse(Pobre == prueba_pobreza2, TRUE, FALSE))
train_hogares%>%count(tets)
train_hogares <- train_hogares%>%mutate(test1 = ifelse(Pobre == prueba_pobreza, TRUE, FALSE))
train_hogares%>%count(test1)
#Base para clasificación hogares
train_h <- train_hogares[names(test_hogares)]
train_h$Pobre <- train_hogares$Pobre
View(train_h)
train_p <- train_personas[names(test_personas)]
names(test_personas)
p_load(tidyverse, rvest, data.table, dplyr, skimr, caret, rio,
vtable, stargazer, ggplot2, boot, MLmetrics, lfe,
tidyverse, fabricatr, stargazer, Hmisc, writexl, viridis, here)
View(train_p)
head(train_p$P6020)
#Creación de variables de nivel hogar en base personas
#Número de mujeres por hogar
train_p <- train_p%>%mutate(mujer = P6020 - 1)
train_p_num_muj <- train_p%>%group_by(id)%>%summarise(num_mujeres = sum(mujer))
train_p_num_muj
train_p$P6050
train_p$P6050%>%head()
#Jefe de hogar es mujer?
train_p <- train_p%>%mutate(jefe_y_mujer = ifelse(mujer == 1 & P6050 == 1, 1, 0))
train_p_jef_muj <- train_p%>%group_by(id)%>%summarise(jefe_mujer = sum(jefe_y_mujer))
train_p%>%count(P6050==1)
train_p%>%count(id)
train_p%>%count(P6050==1)
head(train_p_jef_muj)
